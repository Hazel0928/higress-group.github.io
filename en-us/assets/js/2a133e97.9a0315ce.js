"use strict";(self.webpackChunkhigress_website=self.webpackChunkhigress_website||[]).push([[8854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=s.createContext({}),c=function(e){var t=s.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return s.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,m=p["".concat(o,".").concat(g)]||p[g]||d[g]||a;return n?s.createElement(m,l(l({ref:t},u),{},{components:n})):s.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=g;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return s.createElement.apply(null,l)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=n(7462),r=(n(7294),n(3905));const a={title:"Quick Start",keywords:["Higress"],description:"Quick Start.",custom_edit_url:"https://github.com/higress-group/higress-group.github.io/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/user/quickstart.md"},l="Quick Start",i={unversionedId:"user/quickstart",id:"user/quickstart",title:"Quick Start",description:"Quick Start.",source:"@site/i18n/en-us/docusaurus-plugin-content-docs/current/user/quickstart.md",sourceDirName:"user",slug:"/user/quickstart",permalink:"/en-us/docs/user/quickstart",draft:!1,editUrl:"https://github.com/higress-group/higress-group.github.io/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/user/quickstart.md",tags:[],version:"current",frontMatter:{title:"Quick Start",keywords:["Higress"],description:"Quick Start.",custom_edit_url:"https://github.com/higress-group/higress-group.github.io/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/user/quickstart.md"},sidebar:"docs",previous:{title:"Higress Terminology",permalink:"/en-us/docs/overview/terminology"},next:{title:"Developing a WASM plugin with Golang",permalink:"/en-us/docs/user/wasm-go"}},o={},c=[{value:"Use in a standard K8s cluster",id:"use-in-a-standard-k8s-cluster",level:2},{value:"Step 1: Install Higress",id:"step-1-install-higress",level:3},{value:"Helm Installation Command",id:"helm-installation-command",level:4},{value:"Step 2: Create and test Ingress routes",id:"step-2-create-and-test-ingress-routes",level:3},{value:"Use in Local Environment",id:"use-in-local-environment",level:2},{value:"Step 1: Install kubectl &amp; kind",id:"step-1-install-kubectl--kind",level:3},{value:"Step 2: Create and Activate kind",id:"step-2-create-and-activate-kind",level:3},{value:"Step 3: Install Higress",id:"step-3-install-higress",level:3},{value:"Step 4: Create Ingress Resource and Test",id:"step-4-create-ingress-resource-and-test",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("h2",{id:"use-in-a-standard-k8s-cluster"},"Use in a standard K8s cluster"),(0,r.kt)("h3",{id:"step-1-install-higress"},"Step 1: Install Higress"),(0,r.kt)("h4",{id:"helm-installation-command"},"Helm Installation Command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add higress.io https://higress.io/helm-charts\nhelm install higress higress.io/higress -n higress-system --create-namespace\n")),(0,r.kt)("h3",{id:"step-2-create-and-test-ingress-routes"},"Step 2: Create and test Ingress routes"),(0,r.kt)("p",null,"Assuming that there is already a test service deployed in the default namespace, listening to port 80, create the following K8s Ingress now:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: simple-example\nspec:\n  ingressClassName: higress\n  rules:\n  - host: foo.bar.com\n    http:\n      paths:\n      - path: /foo\n        pathType: Prefix\n        backend:\n          service:\n            name: test\n            port:\n              number: 80\n")),(0,r.kt)("p",null,"Try to access the service with the command below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl \"$(kubectl get svc -n higress-system higress-gateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"/foo -H 'host: foo.bar.com'\n")),(0,r.kt)("h2",{id:"use-in-local-environment"},"Use in Local Environment"),(0,r.kt)("h3",{id:"step-1-install-kubectl--kind"},"Step 1: Install kubectl & kind"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MacOS:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Lo ./kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl\n# for Intel Macs\n[ $(uname -m) = x86_64 ]&& curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-darwin-amd64\n# for M1 / ARM Macs\n[ $(uname -m) = arm64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-darwin-arm64\nchmod +x ./kind ./kubectl\nmv ./kind ./kubectl /some-dir-in-your-PATH/\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use PowerShell in Windows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl.exe -Lo kubectl.exe https://storage.googleapis.com/kubernetes-release/release/$(curl.exe -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/windows/amd64/kubectl.exe\ncurl.exe -Lo kind-windows-amd64.exe https://kind.sigs.k8s.io/dl/v0.17.0/kind-windows-amd64\nMove-Item .\\kind-windows-amd64.exe c:\\some-dir-in-your-PATH\\kind.exe\nMove-Item .\\kubectl.exe c:\\some-dir-in-your-PATH\\kubectl.exe\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Linux:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -Lo ./kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64\nchmod +x ./kind ./kubectl\nsudo mv ./kind ./kubectl /usr/local/bin/kind\n")),(0,r.kt)("h3",{id:"step-2-create-and-activate-kind"},"Step 2: Create and Activate kind"),(0,r.kt)("p",null,"First, create a cluster config file: ",(0,r.kt)("inlineCode",{parentName:"p"},"cluster.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# cluster.conf\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: "ingress-ready=true"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\n')),(0,r.kt)("p",null,"Commands for Mac & Linux:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kind create cluster --name higress --config=cluster.conf\nkubectl config use-context kind-higress\n")),(0,r.kt)("p",null,"Commands for Windows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kind.exe create cluster --name higress --config=cluster.conf\nkubectl.exe config use-context kind-higress\n")),(0,r.kt)("h3",{id:"step-3-install-higress"},"Step 3: Install Higress"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add higress.io https://higress.io/helm-charts\nhelm install higress -n higress-system higress.io/higress-local --create-namespace\n")),(0,r.kt)("h3",{id:"step-4-create-ingress-resource-and-test"},"Step 4: Create Ingress Resource and Test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/alibaba/higress/releases/download/v0.6.1/quickstart.yaml\n")),(0,r.kt)("p",null,"Test Ingress routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# should output "foo"\ncurl localhost/foo\n# should output "bar"\ncurl localhost/bar\n')))}d.isMDXComponent=!0}}]);