"use strict";(self.webpackChunkhigress_website=self.webpackChunkhigress_website||[]).push([[5757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,g=c["".concat(i,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={title:"Custom response",keywords:["higress","custom response"],description:"Custom response plugin configuration reference"},s=void 0,l={unversionedId:"plugins/transformation/custom-response",id:"plugins/transformation/custom-response",title:"Custom response",description:"Custom response plugin configuration reference",source:"@site/i18n/en-us/docusaurus-plugin-content-docs/current/plugins/transformation/custom-response.md",sourceDirName:"plugins/transformation",slug:"/plugins/transformation/custom-response",permalink:"/en-us/docs/plugins/transformation/custom-response",draft:!1,editUrl:"https://github.com/higress-group/higress-group.github.io/blob/main/i18n/en-us/docusaurus-plugin-content-docs/current/plugins/transformation/custom-response.md",tags:[],version:"current",frontMatter:{title:"Custom response",keywords:["higress","custom response"],description:"Custom response plugin configuration reference"},sidebar:"docs",previous:{title:"simple-jwt-auth",permalink:"/en-us/docs/plugins/authentication/simple-jwt-auth"},next:{title:"transformer",permalink:"/en-us/docs/plugins/transformation/transformer"}},i={},u=[{value:"Description",id:"description",level:2},{value:"Configuration Fields",id:"configuration-fields",level:2},{value:"Configuration Samples",id:"configuration-samples",level:2},{value:"Mock Responses",id:"mock-responses",level:3},{value:"Send a Custom Response when Rate-Limited",id:"send-a-custom-response-when-rate-limited",level:3},{value:"Only Enabled for Specific Routes or Domains",id:"only-enabled-for-specific-routes-or-domains",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"custom-response")," plugin implements a function of sending custom responses, including custom HTTP response status codes, HTTP response headers and HTTP response body, which can be used in the scenarios of response mocking and sending a custom response for specific status codes, such as customizing the response for rate-limited requests."),(0,a.kt)("h2",{id:"configuration-fields"},"Configuration Fields"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Requirement"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"status_code"),(0,a.kt)("td",{parentName:"tr",align:null},"number"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional"),(0,a.kt)("td",{parentName:"tr",align:null},"200"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom HTTP response status code")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"headers"),(0,a.kt)("td",{parentName:"tr",align:null},"array of string"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom HTTP response header. Key and value shall be separated using ",(0,a.kt)("inlineCode",{parentName:"td"},"="),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"body"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom HTTP response body")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"enable_on_status"),(0,a.kt)("td",{parentName:"tr",align:null},"array of number"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"The original response status code to match. Generate the custom response only the actual status code matches the configuration. Ignore the status code match if left unconfigured.")))),(0,a.kt)("h2",{id:"configuration-samples"},"Configuration Samples"),(0,a.kt)("h3",{id:"mock-responses"},"Mock Responses"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'status_code: 200\nheaders:\n- Content-Type=application/json\n- Hello=World\nbody: "{\\"hello\\":\\"world\\"}"\n\n')),(0,a.kt)("p",null,"According to the configuration above, all the requests will get the following custom response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},'HTTP/1.1 200 OK\nContent-Type: application/json\nHello: World\nContent-Length: 17\n\n{"hello":"world"}\n')),(0,a.kt)("h3",{id:"send-a-custom-response-when-rate-limited"},"Send a Custom Response when Rate-Limited"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"enable_on_status: \n- 429\nstatus_code: 302\nheaders:\n- Location=https://example.com\n")),(0,a.kt)("p",null,"When rate-limited, normally gateway will return a status code of ",(0,a.kt)("inlineCode",{parentName:"p"},"429")," . Now, rate-limited requests will get the following custom response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"HTTP/1.1 302 Found\nLocation: https://example.com\n")),(0,a.kt)("p",null,"So based on the 302 redirecting mechanism provided by browsers, this can redirect rate-limited users to other pages, for example, a static page hosted on CDN."),(0,a.kt)("p",null,"If you'd like to send other responses when rate-limited, please add other fields into the configuration, referring to the Mock Responses scenario."),(0,a.kt)("h3",{id:"only-enabled-for-specific-routes-or-domains"},"Only Enabled for Specific Routes or Domains"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# Use _rules_ field for fine-grained rule configurations \n_rules_:\n# Rule 1: Match by route name\n- _match_route_:\n  - route-a\n  - route-b\n  body: "{\\"hello\\":\\"world\\"}"\n# Rule 2: Match by domain\n- _match_domain_:\n  - "*.example.com"\n  - test.com\n  enable_on_status: \n  - 429\n  status_code: 200\n  headers:\n  - Content-Type=application/json\n  body: "{\\"errmsg\\": \\"rate limited\\"}"\n')),(0,a.kt)("p",null,"In the rule sample of ",(0,a.kt)("inlineCode",{parentName:"p"},"_match_route_"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"route-a")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"route-b")," are the route names provided when creating a new gateway route. When the current route names matches the configuration, the rule following shall be applied.\nIn the rule sample of ",(0,a.kt)("inlineCode",{parentName:"p"},"_match_domain_"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"*.example.com")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"test.com")," are the domain names used for request matching. When the current domain name matches the configuration, the rule following shall be applied.\nAll rules shall be checked following the order of items in the ",(0,a.kt)("inlineCode",{parentName:"p"},"_rules_")," field, The first matched rule will be applied. All remained will be ignored."))}m.isMDXComponent=!0}}]);